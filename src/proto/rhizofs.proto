
package rhizofs;

message Version {
    required int32 major = 1;
    required int32 minor = 2;
    optional int32 patch = 3 [default = 0];
}


enum RequestType {
    STAT = 0;
    MKDIR = 1;
    UNKNOWN = 2;
    PING = 3;       // ping the server - used to check the connection on filesystem startup
    READDIR = 4;
    INVALID = 5;
    RMDIR = 6;
    UNLINK = 7;
    ACCESS = 8;
    RENAME = 9;
    GETATTR = 10;
    OPEN = 11;
    READ = 12;
    WRITE = 13;
    CREATE = 14;
    TRUNCATE = 15;
    CHMOD = 16;
    UTIMENS = 17;
    LINK = 18;
    SYMLINK = 19;
    READLINK = 20;
    MKNOD = 21;
    STATFS = 22;
}

enum Errno {
    ERRNO_NONE = 0;
    ERRNO_UNKNOWN = 1;
    ERRNO_PERM = 2;
    ERRNO_NOENT = 3;
    ERRNO_NOMEM = 4;
    ERRNO_ACCES = 5;
    ERRNO_BUSY = 6;
    ERRNO_EXIST = 7;
    ERRNO_NOTDIR = 8;
    ERRNO_ISDIR = 9;
    ERRNO_INVAL = 10;
    ERRNO_FBIG = 11;
    ERRNO_NOSPC = 12;
    ERRNO_ROFS = 13;
    ERRNO_SPIPE = 14;
    ERRNO_INVALID_REQUEST = 15;
    ERRNO_UNSERIALIZABLE = 16;
};

enum CompressionType {
    COMPR_NONE = 0;
    COMPR_LZ4 = 1;
};

enum FileType {
    FT_DIRECTORY = 0;
    FT_CHARACTER_DEVICE = 1;
    FT_BLOCK_DEVICE = 2;
    FT_REGULAR_FILE = 3;
    FT_FIFO = 4;
    FT_SOCKET = 5;
    FT_SYMLINK = 6;
};

message PermissionSet {
    required bool read = 1 [default = false];
    required bool write = 2 [default = false];
    required bool execute = 3 [default = false];
};

message Permissions {
    required PermissionSet owner = 1;
    required PermissionSet group = 2;
    required PermissionSet world = 3;
};

// file opening flags passed to open
message OpenFlags {
    required bool rdonly = 1 [default = false];
    required bool wronly = 2 [default = false];
    required bool rdwr = 3 [default = false];
    required bool creat = 4 [default = false];
    required bool excl = 5 [default = false];
    required bool trunc = 6 [default = false];
    required bool append = 7 [default = false];
};

message TimeSet {
    // timestamps (unixtime)
    required int32 access = 1;
    required int32 modification = 2;

    // creation time is not always mandatory
    optional int32 creation = 3;
}; 

message DataBlock {

    // the (uncompressed) size of the data
    required int64 size = 1;

    // the data itself
    required bytes data = 2;

    // compression-method used
    required CompressionType compression = 3 [default = COMPR_NONE];
};

message Attrs {
    // filesire in bytes
    required int64 size = 1;

    // unsigned int. see mapping.c
    //required int32 modemask = 2;

    // userinfo - simply inticate if the user who runs the server is the owner
    // of the file and and if this user is part of the group of the file
    required bool is_owner = 2;
    required bool is_in_group = 3;

    required TimeSet timestamps = 4;

    required FileType filetype = 5;

    required Permissions permissions = 6;

    optional string name = 7;
}

message StatFs {
    required int64 bsize = 1;
    required int64 frsize = 2;
    required int64 blocks = 3;
    required int64 bfree = 4;
    required int64 bavail = 5;

    required int64 files = 6;
    required int64 ffree = 7;
    required int64 favail = 8;

    required int64 fsid = 9;
    required int64 flag = 10;
    required int64 namemax = 11;
}

message Request {
    required RequestType requesttype = 1;
    required Version version = 2;

    optional string path = 3;

    // access permissions
    optional Permissions permissions = 4;

    // path to move/copy/link a file to
    optional string path_to = 5;

    optional OpenFlags openflags = 6;

    optional DataBlock datablock = 7;

    // number of bytes to read/write
    optional int64 size = 8;
    optional int64 offset = 9;

    // filetype - for open operation
    optional FileType filetype = 10;

    // for utimens operation
    optional TimeSet timestamps = 11;
}


message Response {
    required RequestType requesttype = 1;
    required Version version = 2;

    // the errno returned by the server filesystem.
    required Errno errnotype = 3 [default = ERRNO_NONE];

    // READDIR
    repeated Attrs directory_entries = 4;

    // attrs -- returned after getattr request
    optional Attrs attrs = 5;

    optional DataBlock datablock = 6;

    // number of bytes to read/write
    optional int64 size = 8;

    // the target a link/symlink points to
    // this string has to be null terminated
    optional string link_target = 9;

    optional StatFs statfs = 10;
}
